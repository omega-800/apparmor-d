diff --git a/nixos/modules/security/apparmor.nix b/nixos/modules/security/apparmor.nix
index a4b3807e4..746542cb7 100644
--- a/nixos/modules/security/apparmor.nix
+++ b/nixos/modules/security/apparmor.nix
@@ -3,21 +3,41 @@
 with lib;
 
 let
-  inherit (builtins) attrNames head map match readFile;
+  inherit (builtins) attrNames map match;
   inherit (lib) types;
   inherit (config.environment) etc;
   cfg = config.security.apparmor;
-  mkDisableOption = name: mkEnableOption name // {
-    default = true;
-    example = false;
-  };
-  enabledPolicies = filterAttrs (n: p: p.enable) cfg.policies;
-in
+  enabledPolicies = filterAttrs (n: p: p.state != "disable") cfg.policies;
+  mkMergedSubOptionModule = from: subFrom: to: mergeFn:
+    { config, ... }:
+    let subAttrNames = attrNames (getAttrFromPath from config);
+    in mkMerge (map (attrName:
+      mkMergedOptionModule (map (subPath: from ++ [ attrName subPath ]) subFrom)
+      (from ++ [ attrName to ]) (mergeFn attrName)) subAttrNames);
+  mapNewStateOption = attrName: config:
+    let
+      getAttrOfCfg = name:
+        getAttrFromPath [ "security" "apparmor" "profiles" attrName name ]
+        config;
+    in if !(getAttrOfCfg "enable") then
+      "disable"
+    else if (getAttrOfCfg "enforce") then
+      "enforce"
+    else
+      "complain";
 
-{
+in {
   imports = [
-    (mkRemovedOptionModule [ "security" "apparmor" "confineSUIDApplications" ] "Please use the new options: `security.apparmor.policies.<policy>.enable'.")
-    (mkRemovedOptionModule [ "security" "apparmor" "profiles" ] "Please use the new option: `security.apparmor.policies'.")
+    (mkRemovedOptionModule [ "security" "apparmor" "confineSUIDApplications" ]
+      "Please use the new options: `security.apparmor.policies.<policy>.enable'.")
+    (mkRemovedOptionModule [ "security" "apparmor" "profiles" ]
+      "Please use the new option: `security.apparmor.policies'.")
+
+    (mkMergedSubOptionModule [ "security" "apparmor" "profiles" ] [
+      "enable"
+      "enforce"
+    ] "state" mapNewStateOption)
+
     apparmor/includes.nix
     apparmor/profiles.nix
   ];
@@ -25,7 +45,7 @@ in
   options = {
     security.apparmor = {
       enable = mkEnableOption ''
-        the AppArmor Mandatory Access Control system.
+        Enables the AppArmor Mandatory Access Control system.
 
         If you're enabling this module on a running system,
         note that a reboot will be required to activate AppArmor in the kernel.
@@ -45,22 +65,42 @@ in
         description = ''
           AppArmor policies.
         '';
-        type = types.attrsOf (types.submodule ({ name, config, ... }: {
+        type = types.attrsOf (types.submodule ({ name, config, options, ... }: {
           options = {
-            enable = mkDisableOption "loading of the profile into the kernel";
-            enforce = mkDisableOption "enforcing of the policy or only complain in the logs";
+            state = mkOption {
+              description =
+                "The state of the profile as applied to the system by nix";
+              type = types.enum [ "disable" "complain" "enforce" ];
+              default = "complain";
+            };
+
             profile = mkOption {
-              description = "The policy of the profile.";
+              description =
+                "The policy of the profile. Incompatible with path.";
               type = types.lines;
-              apply = pkgs.writeText name;
+            };
+
+            path = mkOption {
+              type = types.nullOr types.path;
+              default = null;
+              description =
+                "A path of a profile to include. Incompatible with profile.";
+              apply = p:
+                assert (assertMsg ((p != null && !options.profile.isDefined)
+                  || (p == null && options.profile.isDefined)) ''
+                    `security.apparmor.policies."${name}"` must define exactly one of either path or profile.'');
+                (if (p != null) then
+                  p
+                else
+                  (pkgs.writeText name config.profile));
             };
           };
         }));
-        default = {};
+        default = { };
       };
       includes = mkOption {
         type = types.attrsOf types.lines;
-        default = {};
+        default = { };
         description = ''
           List of paths to be added to AppArmor's searched paths
           when resolving `include` directives.
@@ -69,7 +109,7 @@ in
       };
       packages = mkOption {
         type = types.listOf types.package;
-        default = [];
+        default = [ ];
         description = "List of packages to be added to AppArmor's include path";
       };
       enableCache = mkEnableOption ''
@@ -93,92 +133,91 @@ in
   };
 
   config = mkIf cfg.enable {
-    assertions = map (policy:
-      { assertion = match ".*/.*" policy == null;
-        message = "`security.apparmor.policies.\"${policy}\"' must not contain a slash.";
-        # Because, for instance, aa-remove-unknown uses profiles_names_list() in rc.apparmor.functions
-        # which does not recurse into sub-directories.
-      }
-    ) (attrNames cfg.policies);
-
-    environment.systemPackages = [
-      pkgs.apparmor-utils
-      pkgs.apparmor-bin-utils
-    ];
+    assertions = map (policy: {
+      assertion = match ".*/.*" policy == null;
+      message =
+        ''`security.apparmor.policies."${policy}"' must not contain a slash.'';
+      # Because, for instance, aa-remove-unknown uses profiles_names_list() in rc.apparmor.functions
+      # which does not recurse into sub-directories.
+    }) (attrNames cfg.policies);
+
+    environment.systemPackages =
+      [ pkgs.apparmor-utils pkgs.apparmor-bin-utils ];
     environment.etc."apparmor.d".source = pkgs.linkFarm "apparmor.d" (
       # It's important to put only enabledPolicies here and not all cfg.policies
       # because aa-remove-unknown reads profiles from all /etc/apparmor.d/*
-      mapAttrsToList (name: p: { inherit name; path = p.profile; }) enabledPolicies ++
-      mapAttrsToList (name: path: { inherit name path; }) cfg.includes
-    );
+      mapAttrsToList (name: p: {
+        inherit name;
+        path = p.path;
+      }) enabledPolicies
+      ++ mapAttrsToList (name: path: { inherit name path; }) cfg.includes);
     environment.etc."apparmor/parser.conf".text = ''
-        ${if cfg.enableCache then "write-cache" else "skip-cache"}
-        cache-loc /var/cache/apparmor
-        Include /etc/apparmor.d
-      '' +
-      concatMapStrings (p: "Include ${p}/etc/apparmor.d\n") cfg.packages;
+      ${if cfg.enableCache then "write-cache" else "skip-cache"}
+      cache-loc /var/cache/apparmor
+      Include /etc/apparmor.d
+    '' + concatMapStrings (p: ''
+      Include ${p}/etc/apparmor.d
+    '') cfg.packages;
     # For aa-logprof
-    environment.etc."apparmor/apparmor.conf".text = ''
-    '';
+    environment.etc."apparmor/apparmor.conf".text = "";
     # For aa-logprof
-    environment.etc."apparmor/severity.db".source = pkgs.apparmor-utils + "/etc/apparmor/severity.db";
-    environment.etc."apparmor/logprof.conf".source = pkgs.runCommand "logprof.conf" {
-      header = ''
-        [settings]
-          # /etc/apparmor.d/ is read-only on NixOS
-          profiledir = /var/cache/apparmor/logprof
-          inactive_profiledir = /etc/apparmor.d/disable
-          # Use: journalctl -b --since today --grep audit: | aa-logprof
-          logfiles = /dev/stdin
-
-          parser = ${pkgs.apparmor-parser}/bin/apparmor_parser
-          ldd = ${pkgs.glibc.bin}/bin/ldd
-          logger = ${pkgs.util-linux}/bin/logger
-
-          # customize how file ownership permissions are presented
-          # 0 - off
-          # 1 - default of what ever mode the log reported
-          # 2 - force the new permissions to be user
-          # 3 - force all perms on the rule to be user
-          default_owner_prompt = 1
-
-          custom_includes = /etc/apparmor.d ${concatMapStringsSep " " (p: "${p}/etc/apparmor.d") cfg.packages}
-
-        [qualifiers]
-          ${pkgs.runtimeShell} = icnu
-          ${pkgs.bashInteractive}/bin/sh = icnu
-          ${pkgs.bashInteractive}/bin/bash = icnu
-          ${config.users.defaultUserShell} = icnu
+    environment.etc."apparmor/severity.db".source = pkgs.apparmor-utils
+      + "/etc/apparmor/severity.db";
+    environment.etc."apparmor/logprof.conf".source =
+      pkgs.runCommand "logprof.conf" {
+        header = ''
+          [settings]
+            # /etc/apparmor.d/ is read-only on NixOS
+            profiledir = /var/cache/apparmor/logprof
+            inactive_profiledir = /etc/apparmor.d/disable
+            # Use: journalctl -b --since today --grep audit: | aa-logprof
+            logfiles = /dev/stdin
+
+            parser = ${pkgs.apparmor-parser}/bin/apparmor_parser
+            ldd = ${pkgs.glibc.bin}/bin/ldd
+            logger = ${pkgs.util-linux}/bin/logger
+
+            # customize how file ownership permissions are presented
+            # 0 - off
+            # 1 - default of what ever mode the log reported
+            # 2 - force the new permissions to be user
+            # 3 - force all perms on the rule to be user
+            default_owner_prompt = 1
+
+            custom_includes = /etc/apparmor.d ${
+              concatMapStringsSep " " (p: "${p}/etc/apparmor.d") cfg.packages
+            }
+
+          [qualifiers]
+            ${pkgs.runtimeShell} = icnu
+            ${pkgs.bashInteractive}/bin/sh = icnu
+            ${pkgs.bashInteractive}/bin/bash = icnu
+            ${config.users.defaultUserShell} = icnu
+        '';
+        footer = "${pkgs.apparmor-utils}/etc/apparmor/logprof.conf";
+        passAsFile = [ "header" ];
+      } ''
+        cp $headerPath $out
+        sed '1,/\[qualifiers\]/d' $footer >> $out
       '';
-      footer = "${pkgs.apparmor-utils}/etc/apparmor/logprof.conf";
-      passAsFile = [ "header" ];
-    } ''
-      cp $headerPath $out
-      sed '1,/\[qualifiers\]/d' $footer >> $out
-    '';
 
     boot.kernelParams = [ "apparmor=1" "security=apparmor" ];
 
     systemd.services.apparmor = {
-      after = [
-        "local-fs.target"
-        "systemd-journald-audit.socket"
-      ];
+      after = [ "local-fs.target" "systemd-journald-audit.socket" ];
       before = [ "sysinit.target" "shutdown.target" ];
       conflicts = [ "shutdown.target" ];
       wantedBy = [ "multi-user.target" ];
       unitConfig = {
-        Description="Load AppArmor policies";
+        Description = "Load AppArmor policies";
         DefaultDependencies = "no";
         ConditionSecurity = "apparmor";
       };
       # Reloading instead of restarting enables to load new AppArmor profiles
       # without necessarily restarting all services which have Requires=apparmor.service
       reloadIfChanged = true;
-      restartTriggers = [
-        etc."apparmor/parser.conf".source
-        etc."apparmor.d".source
-      ];
+      restartTriggers =
+        [ etc."apparmor/parser.conf".source etc."apparmor.d".source ];
       serviceConfig = let
         killUnconfinedConfinables = pkgs.writeShellScript "apparmor-kill" ''
           set -eu
@@ -187,17 +226,26 @@ in
           xargs --verbose --no-run-if-empty --delimiter='\n' \
           kill
         '';
-        commonOpts = p: "--verbose --show-cache ${optionalString (!p.enforce) "--complain "}${p.profile}";
-        in {
+        commonOpts = p:
+          "--verbose --show-cache ${
+            optionalString (p.state == "complain") "--complain "
+          }${p.path}";
+      in {
         Type = "oneshot";
         RemainAfterExit = "yes";
         ExecStartPre = "${pkgs.apparmor-utils}/bin/aa-teardown";
-        ExecStart = mapAttrsToList (n: p: "${pkgs.apparmor-parser}/bin/apparmor_parser --add ${commonOpts p}") enabledPolicies;
-        ExecStartPost = optional cfg.killUnconfinedConfinables killUnconfinedConfinables;
+        ExecStart = mapAttrsToList (n: p:
+          "${pkgs.apparmor-parser}/bin/apparmor_parser --add ${commonOpts p}")
+          enabledPolicies;
+        ExecStartPost =
+          optional cfg.killUnconfinedConfinables killUnconfinedConfinables;
         ExecReload =
           # Add or replace into the kernel profiles in enabledPolicies
           # (because AppArmor can do that without stopping the processes already confined).
-          mapAttrsToList (n: p: "${pkgs.apparmor-parser}/bin/apparmor_parser --replace ${commonOpts p}") enabledPolicies ++
+          mapAttrsToList (n: p:
+            "${pkgs.apparmor-parser}/bin/apparmor_parser --replace ${
+              commonOpts p
+            }") enabledPolicies ++
           # Remove from the kernel any profile whose name is not
           # one of the names within the content of the profiles in enabledPolicies
           # (indirectly read from /etc/apparmor.d/*, without recursing into sub-directory).
